clear all
close all
%%
%parpool % 其中n是你想要的工作者数
load simfc_hc55_atanh.mat
sim_hcfc = simfc_hc55_atanh;
% for i = 1:14
%     model_hc_0 = model_hc(:,:,i);
%     model_hc_0(1:91:end) = 0;
%     model_hcfc(:,:,i) = model_hc_0;
% end
load emphcfc_atanh.mat
emp_hcfc = emphcfc_atanh;
% for i = 1:14
%     FC_hc_sim = emp_hcfc(:,:,i);
%     FC_hc_sim(1:91:end) = 0;
%     emp_hcfc(:,:,i) = FC_hc_sim;
% end
load simfc_ad54_atanh.mat
sim_adfc = simfc_ad54_atanh;
% for i = 1:14
%     FC_ad_sim = model_ad_1(:,:,i);
%     FC_ad_sim(1:91:end) = 0;
%     model_adfc(:,:,i) = FC_ad_sim;
% end
load empadfc_atanh.mat
emp_adfc = empadfc_atanh;
% for i = 1:14
%     model_ad_0= emp_adfc(:,:,i);
%     model_ad_0(1:91:end) = 0;
%     emp_adfc(:,:,i) = model_ad_0;
% end
%% 
% 并行设置
%     delete(gcp('nocreate'))
%     core_use = 11;       % 使用cpu核数?
%     c = parpool(core_use);   % 开启并行池
%%
mean_simhcfc = mean(sim_hcfc,3);
mean_emphcfc = mean(emp_hcfc,3);
mean_simadfc = mean(sim_adfc,3);
mean_empadfc = mean(emp_adfc,3);
%% min-max normalized
for i = 1: size(sim_hcfc,3)
sim_hcfc(:,:,i) =  abs(sim_hcfc(:,:,i));
sim_hcfc(:,:,i) = (sim_hcfc(:,:,i) - min(min(sim_hcfc(:,:,i))))/(max(max(sim_hcfc(:,:,i)))-min(min(sim_hcfc(:,:,i))));
end
for i = 1:size(emp_hcfc,3)
emp_hcfc(:,:,i) =  abs(emp_hcfc(:,:,i));
emp_hcfc(:,:,i) = (emp_hcfc(:,:,i) - min(min(emp_hcfc(:,:,i))))/(max(max(emp_hcfc(:,:,i)))-min(min(emp_hcfc(:,:,i))));
end
for i = 1:size(sim_adfc,3)
sim_adfc(:,:,i) =  abs(sim_adfc(:,:,i));
sim_adfc(:,:,i) = (sim_adfc(:,:,i) - min(min(sim_adfc(:,:,i))))/(max(max(sim_adfc(:,:,i)))-min(min(sim_adfc(:,:,i))));
end
for i = 1:size(emp_adfc,3)
emp_adfc(:,:,i) =  abs(emp_adfc(:,:,i));
emp_adfc(:,:,i) = (emp_adfc(:,:,i) - min(min(emp_adfc(:,:,i))))/(max(max(emp_adfc(:,:,i)))-min(min(emp_adfc(:,:,i))));
end
% %% z-score normalized
% for i = 1: size(sim_hcfc,3)
% sim_hcfc(:,:,i) =  abs(sim_hcfc(:,:,i));
% sim_hcfc(:,:,i) = z_score_normalization(sim_hcfc(:,:,i));
% end
% for i = 1:size(emp_hcfc,3)
% emp_hcfc(:,:,i) =  abs(emp_hcfc(:,:,i));
% emp_hcfc(:,:,i) =  z_score_normalization(emp_hcfc(:,:,i));
% end
% for i = 1:size(sim_adfc,3)
% sim_adfc(:,:,i) =  abs(sim_adfc(:,:,i));
% sim_adfc(:,:,i) = z_score_normalization(sim_adfc(:,:,i));
% end
% for i = 1:size(emp_adfc,3)
% emp_adfc(:,:,i) =  abs(emp_adfc(:,:,i));
% emp_adfc(:,:,i) = z_score_normalization(emp_adfc(:,:,i));
% end
for i = 1:11
    simhcfc = zeros(90,90,14);
    emphcfc = zeros(90,90,14);
    simadfc = zeros(90,90,14);
    empadfc = zeros(90,90,14);
    for j = 1:14
        simhcfc(:,:,j) = yuzhi((i-1)*0.05,sim_hcfc(:,:,j));
        emphcfc(:,:,j) = yuzhi((i-1)*0.05,emp_hcfc(:,:,j));
        simadfc(:,:,j) = yuzhi((i-1)*0.05,sim_adfc(:,:,j));
        empadfc(:,:,j) = yuzhi((i-1)*0.05,emp_adfc(:,:,j));
    end
    %%
    [simhc_C,simhc_L,simhc_Eglob,simhc_Eloc] = compute_net(simhcfc);
    [emphc_C,emphc_L,emphc_Eglob,emphc_Eloc] = compute_net(emphcfc);
    [simad_C,simad_L,simad_Eglob,simad_Eloc] = compute_net(simadfc);
    [empad_C,empad_L,empad_Eglob,empad_Eloc] = compute_net(empadfc);
    %%
    simhc_net(i,:,:) = [simhc_C,simhc_L,simhc_Eglob,simhc_Eloc];
    emphc_net(i,:,:) = [emphc_C,emphc_L,emphc_Eglob,emphc_Eloc];
    simad_net(i,:,:) = [simad_C,simad_L,simad_Eglob,simad_Eloc];
    empad_net(i,:,:) = [empad_C,empad_L,empad_Eglob,empad_Eloc];
    i
end
function [C,L,Eglob,Eloc] = compute_net(fc)
    for j = 1:14
        mat = fc(:,:,j);
        C(j)=mean(clustering_coef_wu(mat));
        D(:,:,j) = distance_wei(mat);  
        % Shortest path length
        %L(j)=( sum( sum(  ( 1./ (D(:,:,j)+0.5*eye(size(mat,1),size(mat,1))) ) ) )-4)/size(mat,1)*(size(mat,1)-1);
        L(j)= size(mat,1)*(size(mat,1)-1)/( sum( sum(1./( D(:,:,j)+eye(size(mat,1),size(mat,1)) ) ) )-size(mat,1) )/size(mat,1)*(size(mat,1)-1);
        % global efficiency
        Eglob(j)=efficiency_wei(mat);
        %Eglob(j) = ( sum( sum(   D(:,:,j)  ) )-4)/size(mat,1)*(size(mat,1)-1);
        % local efficiency
        Eloc(j)=mean(efficiency_wei(mat,1)); 
    end
    C = C';
    L = L';
    Eglob = Eglob';
    Eloc = Eloc';
end
% function normalized_matrix = z_score_normalization(matrix)
%     % 计算均值和标准差
%     mean_val = mean(matrix(:));
%     std_val = std(matrix(:));
%     
%     % Z-score 正则化
%     normalized_matrix = (matrix - mean_val) / std_val;
% end